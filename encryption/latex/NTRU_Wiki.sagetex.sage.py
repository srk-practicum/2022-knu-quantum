## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file NTRU_Wiki.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_32 = Integer(32); _sage_const_11 = Integer(11); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_5 = Integer(5); _sage_const_34 = Integer(34); _sage_const_35 = Integer(35); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6); _sage_const_9 = Integer(9); _sage_const_10 = Integer(10); _sage_const_8 = Integer(8); _sage_const_7 = Integer(7); _sage_const_42 = Integer(42); _sage_const_45 = Integer(45); _sage_const_0 = Integer(0); _sage_const_56 = Integer(56); _sage_const_61 = Integer(61); _sage_const_64 = Integer(64); _sage_const_31 = Integer(31); _sage_const_33 = Integer(33); _sage_const_69 = Integer(69); _sage_const_72 = Integer(72); _sage_const_79 = Integer(79); _sage_const_87 = Integer(87); _sage_const_90 = Integer(90); _sage_const_93 = Integer(93); _sage_const_95 = Integer(95); _sage_const_102 = Integer(102); _sage_const_113 = Integer(113); _sage_const_116 = Integer(116); _sage_const_119 = Integer(119); _sage_const_124 = Integer(124); _sage_const_129 = Integer(129); _sage_const_133 = Integer(133); _sage_const_143 = Integer(143); _sage_const_147 = Integer(147); _sage_const_165 = Integer(165); _sage_const_169 = Integer(169); _sage_const_173 = Integer(173); _sage_const_179 = Integer(179); _sage_const_184 = Integer(184); _sage_const_187 = Integer(187); _sage_const_190 = Integer(190); _sage_const_193 = Integer(193); _sage_const_196 = Integer(196)## This file (NTRU_Wiki.sagetex.sage) was *autogenerated* from NTRU_Wiki.tex with sagetex.sty version 2020/08/12 v3.5.
import sagetex
_st_ = sagetex.SageTeXProcessor('NTRU_Wiki', version='2020/08/12 v3.5', version_check=True)
_st_.current_tex_line = _sage_const_32 
_st_.blockbegin()
try:
     N = _sage_const_11 ; p = _sage_const_3 ; q = _sage_const_2 **_sage_const_5 
except:
 _st_.goboom(_sage_const_34 )
_st_.blockend()
_st_.current_tex_line = _sage_const_35 
_st_.blockbegin()
try:
 Zx = ZZ['x']; (x,) = Zx._first_ngens(1)
 T = Zx.change_ring(Integers(p)).quotient(x**N-_sage_const_1 )
 f = -_sage_const_1  + x + x**_sage_const_2  - x**_sage_const_4  + x**_sage_const_6  + x**_sage_const_9  - x**_sage_const_10 
 g = -_sage_const_1  + x**_sage_const_2  + x**_sage_const_3  + x**_sage_const_5  - x**_sage_const_8  - x**_sage_const_10 
 m=-_sage_const_1 +x**_sage_const_3 -x**_sage_const_4 -x**_sage_const_8 +x**_sage_const_9 -x**_sage_const_10 
 r=-_sage_const_1 +x**_sage_const_2 +x**_sage_const_3 +x**_sage_const_4 -x**_sage_const_5 -x**_sage_const_7 
except:
 _st_.goboom(_sage_const_42 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_45 
 _st_.inline(_sage_const_0 , latex(f))
except:
 _st_.goboom(_sage_const_45 )
_st_.current_tex_line = _sage_const_56 
_st_.blockbegin()
try:
 def balancedmod(f,q,N):
     g = list(((f[i] + q//_sage_const_2 ) % q) - q//_sage_const_2  for i in range(N))
     Zx = ZZ['x']; (x,) = Zx._first_ngens(1)
     return Zx(g)
except:
 _st_.goboom(_sage_const_61 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_64 
 _st_.inline(_sage_const_1 , latex(balancedmod(_sage_const_1 +_sage_const_31 *x+_sage_const_32 *x**_sage_const_2 +_sage_const_33 *x**_sage_const_3 -x**_sage_const_4 , _sage_const_32 , _sage_const_11 )))
except:
 _st_.goboom(_sage_const_64 )
_st_.current_tex_line = _sage_const_69 
_st_.blockbegin()
try:
 def multiply(f,g,N):
     return (f * g) % (x**N-_sage_const_1 )
except:
 _st_.goboom(_sage_const_72 )
_st_.blockend()
_st_.current_tex_line = _sage_const_79 
_st_.blockbegin()
try:
 def invertmodprime(f,p,N):
     Zx = ZZ['x']; (x,) = Zx._first_ngens(1)
     # T is a quotient ring constructed from Z[x]
     # after its base being changed to Zp using ideal x^N-1.
     T = Zx.change_ring(Integers(p)).quotient(x**N-_sage_const_1 )
     # Lift function converts Zp[x]/x^N-1 back into Zp[x].
     return Zx(lift(_sage_const_1  / T(f)))
except:
 _st_.goboom(_sage_const_87 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_90 
 _st_.inline(_sage_const_2 , latex(f))
except:
 _st_.goboom(_sage_const_90 )
try:
 _st_.current_tex_line = _sage_const_93 
 _st_.inline(_sage_const_3 , latex(invertmodprime(f,p,N)))
except:
 _st_.goboom(_sage_const_93 )
try:
 _st_.current_tex_line = _sage_const_95 
 _st_.inline(_sage_const_4 , latex(f))
except:
 _st_.goboom(_sage_const_95 )
_st_.current_tex_line = _sage_const_102 
_st_.blockbegin()
try:
 def invertmodpowerof2(f,q,N):
     a=_sage_const_2 
     b=invertmodprime(f, _sage_const_2 , N)
     while a<q:
         a=a**_sage_const_2 
         b=multiply(b, (_sage_const_2 -multiply(f,b,N)),N)
         Za = PolynomialRing(Integers(a), names=('z',)); (z,) = Za._first_ngens(1)
         f1=Zx(Za(b))
     Zq = PolynomialRing(Integers(q), names=('x',)); (x,) = Zq._first_ngens(1)
     return Zx(Zq(b))
except:
 _st_.goboom(_sage_const_113 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_116 
 _st_.inline(_sage_const_5 , latex(f))
except:
 _st_.goboom(_sage_const_116 )
try:
 _st_.current_tex_line = _sage_const_119 
 _st_.inline(_sage_const_6 , latex(invertmodpowerof2(f,q,N)))
except:
 _st_.goboom(_sage_const_119 )
_st_.current_tex_line = _sage_const_124 
_st_.blockbegin()
try:
 def validateparams():
     if q > p and gcd(p,q) == _sage_const_1 :
         return True
     return False
except:
 _st_.goboom(_sage_const_129 )
_st_.blockend()
_st_.current_tex_line = _sage_const_133 
_st_.blockbegin()
try:
 def generatepolynomial(d,N):
     assert d <= N
     result = N*[_sage_const_0 ]
     for j in range(d):
         while True:
             r = randrange(N)
             if not result[r]: break
         result[r] = _sage_const_1 -_sage_const_2 *randrange(_sage_const_2 )
     return Zx(result)
except:
 _st_.goboom(_sage_const_143 )
_st_.blockend()
_st_.current_tex_line = _sage_const_147 
_st_.blockbegin()
try:
 def generatekeys(N):
     if validateparams():
         while True:
             try:
                 f = generatepolynomial(d,N)
                 g = generatepolynomial(d,N)
                 f_q = invertmodpowerof2(f,q)
                 f_p = invertmodprime(f,p,N)
                 break
             except:
                 pass
         public_key = balancedmod(p * multiply(f_q,g,N),q)
         secret_key = f,f_p
         return public_key,secret_key
     else:
         print("Provided params are not correct. q and p should be co-prime, q should be a power of 2 considerably larger than p and p should be prime.")
 
except:
 _st_.goboom(_sage_const_165 )
_st_.blockend()
_st_.current_tex_line = _sage_const_169 
_st_.blockbegin()
try:
 def generatemessage():
     result = list(randrange(_sage_const_3 ) - _sage_const_1  for j in range(N))
     return Zx(result)
except:
 _st_.goboom(_sage_const_173 )
_st_.blockend()
_st_.current_tex_line = _sage_const_179 
_st_.blockbegin()
try:
 def encrypt(message, publickey,r,N):
       Zq = PolynomialRing(Integers(q), names=('x',)); (x,) = Zq._first_ngens(1)
       return Zx(Zq(balancedmod(multiply(publickey,r,N) + message,q,N)))
       #return balancedmod(multiply(publickey,r,N) + message,q,N)
except:
 _st_.goboom(_sage_const_184 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_187 
 _st_.inline(_sage_const_7 , latex(m))
except:
 _st_.goboom(_sage_const_187 )
try:
 _st_.current_tex_line = _sage_const_190 
 _st_.inline(_sage_const_8 , latex(-_sage_const_1 +x**_sage_const_2 +x**_sage_const_3 +x**_sage_const_4 -x**_sage_const_5 -x**_sage_const_7 ))
except:
 _st_.goboom(_sage_const_190 )
try:
 _st_.current_tex_line = _sage_const_193 
 _st_.inline(_sage_const_9 , latex(balancedmod(multiply(g,p*invertmodpowerof2(f,q,N),N),q,N)))
except:
 _st_.goboom(_sage_const_193 )
try:
 _st_.current_tex_line = _sage_const_196 
 _st_.inline(_sage_const_10 , latex(encrypt(m,balancedmod(multiply(g,p*invertmodpowerof2(f,q,N),N),q,N),r,N)))
except:
 _st_.goboom(_sage_const_196 )
_st_.endofdoc()

