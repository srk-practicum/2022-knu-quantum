## -*- encoding: utf-8 -*-


# This file was *autogenerated* from the file 2022-01-03-181142-truncated.sagetex.sage
from sage.all_cmdline import *   # import sage library

_sage_const_32 = Integer(32); _sage_const_11 = Integer(11); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_5 = Integer(5); _sage_const_34 = Integer(34); _sage_const_35 = Integer(35); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6); _sage_const_9 = Integer(9); _sage_const_10 = Integer(10); _sage_const_0 = Integer(0); _sage_const_46 = Integer(46); _sage_const_49 = Integer(49); _sage_const_60 = Integer(60); _sage_const_65 = Integer(65); _sage_const_68 = Integer(68); _sage_const_31 = Integer(31); _sage_const_33 = Integer(33); _sage_const_73 = Integer(73); _sage_const_76 = Integer(76); _sage_const_83 = Integer(83); _sage_const_114 = Integer(114); _sage_const_117 = Integer(117); _sage_const_120 = Integer(120); _sage_const_122 = Integer(122); _sage_const_128 = Integer(128); _sage_const_139 = Integer(139); _sage_const_142 = Integer(142); _sage_const_145 = Integer(145); _sage_const_147 = Integer(147); _sage_const_7 = Integer(7); _sage_const_153 = Integer(153); _sage_const_173 = Integer(173); _sage_const_174 = Integer(174); _sage_const_212 = Integer(212); _sage_const_214 = Integer(214); _sage_const_8 = Integer(8); _sage_const_218 = Integer(218); _sage_const_220 = Integer(220); _sage_const_225 = Integer(225); _sage_const_228 = Integer(228); _sage_const_231 = Integer(231); _sage_const_235 = Integer(235); _sage_const_246 = Integer(246); _sage_const_248 = Integer(248); _sage_const_252 = Integer(252); _sage_const_254 = Integer(254); _sage_const_258 = Integer(258); _sage_const_261 = Integer(261); _sage_const_12 = Integer(12)## This file (2022-01-03-181142-truncated.sagetex.sage) was *autogenerated* from 2022-01-03-181142-truncated.tex with sagetex.sty version 2020/08/12 v3.5.
import sagetex
_st_ = sagetex.SageTeXProcessor('2022-01-03-181142-truncated', version='2020/08/12 v3.5', version_check=True)
_st_.current_tex_line = _sage_const_32 
_st_.blockbegin()
try:
     N = _sage_const_11 ; p = _sage_const_3 ; q = _sage_const_2 **_sage_const_5 
except:
 _st_.goboom(_sage_const_34 )
_st_.blockend()
_st_.current_tex_line = _sage_const_35 
_st_.blockbegin()
try:
 Zx = ZZ['x']; (x,) = Zx._first_ngens(1)
 T = Zx.change_ring(Integers(p)).quotient(x**N-_sage_const_1 )
 f = -_sage_const_1  + x + x**_sage_const_2  - x**_sage_const_4  + x**_sage_const_6  + x**_sage_const_9  - x**_sage_const_10 
 def find_degree(coefs_list):
     """
     returns the degree of polynomial
     """
     for i in range(len(coefs_list)-_sage_const_1 , -_sage_const_1 , -_sage_const_1 ):
         if coefs_list[i] != _sage_const_0 :
             return i
except:
 _st_.goboom(_sage_const_46 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_49 
 _st_.inline(_sage_const_0 , latex(f))
except:
 _st_.goboom(_sage_const_49 )
_st_.current_tex_line = _sage_const_60 
_st_.blockbegin()
try:
 def balancedmod(f,q):
     g = list(((f[i] + q//_sage_const_2 ) % q) - q//_sage_const_2  for i in range(N))
     Zx = ZZ['x']; (x,) = Zx._first_ngens(1)
     return Zx(g)
except:
 _st_.goboom(_sage_const_65 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_68 
 _st_.inline(_sage_const_1 , latex(balancedmod(_sage_const_1 +_sage_const_31 *x+_sage_const_32 *x**_sage_const_2 +_sage_const_33 *x**_sage_const_3 -x**_sage_const_4 , _sage_const_32 )))
except:
 _st_.goboom(_sage_const_68 )
_st_.current_tex_line = _sage_const_73 
_st_.blockbegin()
try:
 def convolution(f,g):
     return (f * g) % (x**N-_sage_const_1 )
except:
 _st_.goboom(_sage_const_76 )
_st_.blockend()
_st_.current_tex_line = _sage_const_83 
_st_.blockbegin()
try:
 def invertmodprime(f,p):
     Zx = ZZ['x']; (x,) = Zx._first_ngens(1)
     Zq = PolynomialRing(Integers(p), names=('z',)); (z,) = Zq._first_ngens(1)
     ZQphi = Zq.quotient(z**N-_sage_const_1 , names=('Z',)); (Z,) = ZQphi._first_ngens(1)
     a = f % p
     a = a.subs(x=z)
     k = _sage_const_0 
     b = _sage_const_1 *z**_sage_const_0 
     c = _sage_const_0 *z**_sage_const_0 
     f = a
     g = z**N-_sage_const_1 
 
     if a.gcd(g) != _sage_const_1 :
         raise Exception("inversion dosen't exist!")
     while True:
         while list(f)[_sage_const_0 ] == _sage_const_0 :
             f /= Z
             c *= Z
             k += _sage_const_1 
         if find_degree(list(f)) == _sage_const_0 :
             b = _sage_const_1 /list(f)[_sage_const_0 ] * b
             res = Z**(N-k) * b
             return Zx(res.lift())
         if find_degree(list(f)) < find_degree(list(g)):
             f, g = g, f
             b, c = c, b
         u = list(f)[_sage_const_0 ] * (_sage_const_1 /list(g)[_sage_const_0 ])
         f -= u*g
         b -= u*c
 
except:
 _st_.goboom(_sage_const_114 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_117 
 _st_.inline(_sage_const_2 , latex(f))
except:
 _st_.goboom(_sage_const_117 )
try:
 _st_.current_tex_line = _sage_const_120 
 _st_.inline(_sage_const_3 , latex(invertmodprime(f,p)))
except:
 _st_.goboom(_sage_const_120 )
try:
 _st_.current_tex_line = _sage_const_122 
 _st_.inline(_sage_const_4 , latex(f))
except:
 _st_.goboom(_sage_const_122 )
_st_.current_tex_line = _sage_const_128 
_st_.blockbegin()
try:
 def invertmodpowerof2(f, p):
     r = int(math.log(p, _sage_const_2 ))
     p = _sage_const_2 
     q = p
     b = invertmodprime(f, p)
     while q < p**r:
         q = q**_sage_const_2 
         b = b * (_sage_const_2  - f*b) % q % (x**N-_sage_const_1 )
     b = b % p**r % (x**N - _sage_const_1 )
     return b
except:
 _st_.goboom(_sage_const_139 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_142 
 _st_.inline(_sage_const_5 , latex(f))
except:
 _st_.goboom(_sage_const_142 )
try:
 _st_.current_tex_line = _sage_const_145 
 _st_.inline(_sage_const_6 , latex(invertmodpowerof2(f,q)))
except:
 _st_.goboom(_sage_const_145 )
try:
 _st_.current_tex_line = _sage_const_147 
 _st_.inline(_sage_const_7 , latex(f))
except:
 _st_.goboom(_sage_const_147 )
_st_.current_tex_line = _sage_const_153 
_st_.blockbegin()
try:
 def validate_params():
     ''' checks params meet certain conditions: if q is considerably larger than p
         and if greatest common divider of p and q is 1
 
         returns N, p, q '''
 
     if q > p and gcd(p,q) == _sage_const_1 :
         return True
     return False
 
 def generate_polynomial(d1, d2):
     ''' generates a random polynomial with d nonzero coefficients
         returns Zx polynomial '''
     assert (d1 + d2) <= N
 
     result = [_sage_const_1 ]*d1 + [-_sage_const_1 ]*d2 + [_sage_const_0 ]*(N-d1-d2)
     shuffle(result)
 
     return Zx(result)
except:
 _st_.goboom(_sage_const_173 )
_st_.blockend()
_st_.current_tex_line = _sage_const_174 
_st_.blockbegin()
try:
 def generate_keys(polynomial_1 = None, polynomial_2= None):
     # validate params
     if validate_params():
         while True:
             try:
                 if polynomial_1 is None or polynomial_2 is None:
 
                     f = generate_polynomial(d+_sage_const_1 , d)
                     g = generate_polynomial(d, d)
                 else:
                     # it use your polynomials
                     f = polynomial_1
                     g = polynomial_2
 
 
                 # formula: find f_q, where: f_q (*) f = 1 (mod q)
                 # assuming q is a power of 2
                 f_q = invertmodpowerof2(f,q)
 
                 # formula: find f_p, where: f_p (*) f = 1 (mod p)
                 # assuming p is a prime number
                 f_p = invertmodprime(f,p)
                 break
 
             except:
                 pass
 
         #formula: public key = F_q ~ g (mod q)
         public_key = balancedmod(p * convolution(f_q,g),q)
 
 
         secret_key = f,f_p
         return public_key,secret_key
 
     else:
         print("")
 
except:
 _st_.goboom(_sage_const_212 )
_st_.blockend()
_st_.current_tex_line = _sage_const_214 
_st_.blockbegin()
try:
 public_key, secret_key = generate_keys(-_sage_const_1 +x+x**_sage_const_2 -x**_sage_const_4 +x**_sage_const_6 +x**_sage_const_9 -x**_sage_const_10 , -_sage_const_1 +x**_sage_const_2 +x**_sage_const_3 +x**_sage_const_5 -x**_sage_const_8 -x**_sage_const_10 )
 
 
except:
 _st_.goboom(_sage_const_218 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_220 
 _st_.inline(_sage_const_8 , latex(public_key))
except:
 _st_.goboom(_sage_const_220 )
_st_.current_tex_line = _sage_const_225 
_st_.blockbegin()
try:
 def encrypt(message, public_key, r):
     return balancedmod(convolution(public_key,r) + message,q)
except:
 _st_.goboom(_sage_const_228 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_231 
 _st_.inline(_sage_const_9 , latex(encrypt(-_sage_const_1 +x**_sage_const_3 -x**_sage_const_4 -x**_sage_const_8 +x**_sage_const_9 +x**_sage_const_10 , public_key, -_sage_const_1 +x**_sage_const_2 +x**_sage_const_3 +x**_sage_const_4 -x**_sage_const_5 -x**_sage_const_7 ).change_ring(Integers(q))))
except:
 _st_.goboom(_sage_const_231 )
_st_.current_tex_line = _sage_const_235 
_st_.blockbegin()
try:
 def decrypt(encrypted_message, secret_key):
     # private key - f; additional variable stored for decryption - f_p
     f,f_p = secret_key
 
     # formula: a = f ~ encrypted_message (mod q)
     # balance coefficients of a for the integers in interval [-q/2, +q/2]
     a = balancedmod(convolution(encrypted_message,f),q)
 
     # formula: F_p ~ a (mod p) with additional balancing as above
     return balancedmod(convolution(a,f_p),p)
except:
 _st_.goboom(_sage_const_246 )
_st_.blockend()
_st_.current_tex_line = _sage_const_248 
_st_.blockbegin()
try:
 
 encrypted_message=encrypt(-_sage_const_1 +x**_sage_const_3 -x**_sage_const_4 -x**_sage_const_8 +x**_sage_const_9 +x**_sage_const_10 , public_key, -_sage_const_1 +x**_sage_const_2 +x**_sage_const_3 +x**_sage_const_4 -x**_sage_const_5 -x**_sage_const_7 )
 a = convolution(encrypted_message,f) % _sage_const_32 
except:
 _st_.goboom(_sage_const_252 )
_st_.blockend()
try:
 _st_.current_tex_line = _sage_const_254 
 _st_.inline(_sage_const_10 , latex(a))
except:
 _st_.goboom(_sage_const_254 )
try:
 _st_.current_tex_line = _sage_const_258 
 _st_.inline(_sage_const_11 , latex(balancedmod(a, p)))
except:
 _st_.goboom(_sage_const_258 )
try:
 _st_.current_tex_line = _sage_const_261 
 _st_.inline(_sage_const_12 , latex(decrypt(encrypted_message, secret_key)))
except:
 _st_.goboom(_sage_const_261 )
_st_.endofdoc()

